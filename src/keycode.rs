#[allow(clippy::enum_glob_use)]
use self::Keycode::*;
#[derive(Copy, Clone, PartialEq)]
#[allow(non_camel_case_types, unused)]
#[repr(u8)]
pub enum Keycode {
    KC_NO = 0x00,

    KC_A = 0x04,
    KC_B = 0x05,
    KC_C = 0x06,
    KC_D = 0x07,
    KC_E = 0x08,
    KC_F = 0x09,
    KC_G = 0x0a,
    KC_H = 0x0b,
    KC_I = 0x0c,
    KC_J = 0x0d,
    KC_K = 0x0e,
    KC_L = 0x0f,
    KC_M = 0x10,
    KC_N = 0x11,
    KC_O = 0x12,
    KC_P = 0x13,
    KC_Q = 0x14,
    KC_R = 0x15,
    KC_S = 0x16,
    KC_T = 0x17,
    KC_U = 0x18,
    KC_V = 0x19,
    KC_W = 0x1a,
    KC_X = 0x1b,
    KC_Y = 0x1c,
    KC_Z = 0x1d,

    KC_1 = 0x1e,
    KC_2 = 0x1f,
    KC_3 = 0x20,
    KC_4 = 0x21,
    KC_5 = 0x22,
    KC_6 = 0x23,
    KC_7 = 0x24,
    KC_8 = 0x25,
    KC_9 = 0x26,
    KC_0 = 0x27,

    KC_ENTER = 0x28,
    KC_ESCAPE = 0x29,
    KC_BACKSPACE = 0x2A,
    KC_TAB = 0x2B,
    KC_SPACE = 0x2C,
    KC_MINUS = 0x2D,
    KC_EQUAL = 0x2E,
    KC_LEFT_BRACKET = 0x2F,
    KC_RIGHT_BRACKET = 0x30,
    KC_BACKSLASH = 0x31,
    KC_NONUS_HASH = 0x32,
    KC_SEMICOLON = 0x33,
    KC_QUOTE = 0x34,
    KC_GRAVE = 0x35,
    KC_COMMA = 0x36,
    KC_DOT = 0x37,
    KC_SLASH = 0x38,
    KC_CAPS_LOCK = 0x39,

    KC_F1 = 0x3A,
    KC_F2 = 0x3B,
    KC_F3 = 0x3C,
    KC_F4 = 0x3D,
    KC_F5 = 0x3E,
    KC_F6 = 0x3F,
    KC_F7 = 0x40,
    KC_F8 = 0x41,
    KC_F9 = 0x42,
    KC_F10 = 0x43,
    KC_F11 = 0x44,
    KC_F12 = 0x45,

    KC_PRINTSCREEN = 0x46,
    KC_SCROLL_LOCK = 0x47,
    KC_PAUSE = 0x48,
    KC_INSERT = 0x49,
    KC_HOME = 0x4A,
    KC_PAGEUP = 0x4B,
    KC_DELETE_FORWARD = 0x4C,
    KC_END = 0x4D,
    KC_PAGEDOWN = 0x4E,

    KC_RIGHT_ARROW = 0x4F,
    KC_LEFT_ARROW = 0x50,
    KC_DOWN_ARROW = 0x51,
    KC_UP_ARROW = 0x52,

    KC_NUM_LOCK = 0x53,
    KC_KEYPAD_FOWARDSLASH = 0x54,
    KC_KEYPAD_ASTERISK = 0x55,
    KC_KEYPAD_MINUS = 0x56,
    KC_KEYPAD_PLUS = 0x57,
    KC_KEYPAD_ENTER = 0x58,
    KC_KEYPAD_1 = 0x59,
    KC_KEYPAD_2 = 0x5a,
    KC_KEYPAD_3 = 0x5b,
    KC_KEYPAD_4 = 0x5c,
    KC_KEYPAD_5 = 0x5d,
    KC_KEYPAD_6 = 0x5e,
    KC_KEYPAD_7 = 0x5f,
    KC_KEYPAD_8 = 0x60,
    KC_KEYPAD_9 = 0x61,
    KC_KEYPAD_0 = 0x62,

    KC_KEYPAD_DOT = 0x63,
    KC_NONUS_BACKSLASH = 0x64,
    KC_APP = 0x65,
    KC_POWER = 0x66,
    KC_KEYPAD_EQUAL = 0x67,
    KC_F13 = 0x68,
    KC_F14 = 0x69,
    KC_F15 = 0x6a,
    KC_F16 = 0x6b,
    KC_F17 = 0x6c,
    KC_F18 = 0x6d,
    KC_F19 = 0x6e,
    KC_F20 = 0x6f,
    KC_F21 = 0x70,
    KC_F22 = 0x71,
    KC_F23 = 0x72,
    KC_F24 = 0x73,

    KC_EXECUTE = 0x74,
    KC_HELP = 0x75,
    KC_MENU = 0x76,
    KC_SELECT = 0x77,
    KC_STOP = 0x78,
    KC_AGAIN = 0x79,
    KC_UNDO = 0x7A,
    KC_CUT = 0x7B,
    KC_PASTE = 0x7D,
    KC_FIND = 0x7E,

    KC_MUTE = 0x7f,
    KC_VOLUP = 0x80,
    KC_VOLDOWN = 0x81,
    
    KC_LOCKING_CAPS_LOCK = 0x0082,
    KC_LOCKING_NUM_LOCK = 0x0083,
    KC_LOCKING_SCROLL_LOCK = 0x0084,
    KC_KEYPAD_COMMA = 0x85,
    KC_EQUAL_SIGN = 0x86,
    KC_INTERNATIONAL_1 = 0x0087,
    KC_INTERNATIONAL_2 = 0x0088,
    KC_INTERNATIONAL_3 = 0x0089,
    KC_INTERNATIONAL_4 = 0x008A,
    KC_INTERNATIONAL_5 = 0x008B,
    KC_INTERNATIONAL_6 = 0x008C,
    KC_INTERNATIONAL_7 = 0x008D,
    KC_INTERNATIONAL_8 = 0x008E,
    KC_INTERNATIONAL_9 = 0x008F,
    KC_LANGUAGE_1 = 0x0090,
    KC_LANGUAGE_2 = 0x0091,
    KC_LANGUAGE_3 = 0x0092,
    KC_LANGUAGE_4 = 0x0093,
    KC_LANGUAGE_5 = 0x0094,
    KC_LANGUAGE_6 = 0x0095,
    KC_LANGUAGE_7 = 0x0096,
    KC_LANGUAGE_8 = 0x0097,
    KC_LANGUAGE_9 = 0x0098,
    
    KC_ALTERNATE_ERASE = 0x0099,
    KC_SYSTEM_REQUEST = 0x009A,
    KC_CANCEL = 0x009B,
    KC_CLEAR = 0x009C,
    KC_PRIOR = 0x009D,
    KC_RETURN = 0x009E,
    KC_SEPARATOR = 0x009F,
    KC_OUT = 0x00A0,
    KC_OPER = 0x00A1,
    KC_CLEAR_AGAIN = 0x00A2,
    KC_CRSEL = 0x00A3,
    KC_EXSEL = 0x00A4,
    // figure out how qmk uses these keycodes/do more testing
    // KC_SYSTEM_POWER = 0x00A5,
    // KC_SYSTEM_SLEEP = 0x00A6,
    // KC_SYSTEM_WAKE = 0x00A7,
    // KC_AUDIO_MUTE = 0x00A8,
    // KC_AUDIO_VOL_UP = 0x00A9,
    // KC_AUDIO_VOL_DOWN = 0x00AA,
    // KC_MEDIA_NEXT_TRACK = 0x00AB,
    // KC_MEDIA_PREV_TRACK = 0x00AC,
    // KC_MEDIA_STOP = 0x00AD,
    // KC_MEDIA_PLAY_PAUSE = 0x00AE,
    // KC_MEDIA_SELECT = 0x00AF,
    // KC_MEDIA_EJECT = 0x00B0,
    // KC_MAIL = 0x00B1,
    // KC_CALCULATOR = 0x00B2,
    // KC_MY_COMPUTER = 0x00B3,
    // KC_WWW_SEARCH = 0x00B4,
    // KC_WWW_HOME = 0x00B5,
    // KC_WWW_BACK = 0x00B6,
    // KC_WWW_FORWARD = 0x00B7,
    // KC_WWW_STOP = 0x00B8,
    // KC_WWW_REFRESH = 0x00B9,
    // KC_WWW_FAVORITES = 0x00BA,
    // KC_MEDIA_FAST_FORWARD = 0x00BB,
    // KC_MEDIA_REWIND = 0x00BC,
    // KC_BRIGHTNESS_UP = 0x00BD,
    // KC_BRIGHTNESS_DOWN = 0x00BE,
    // KC_CONTROL_PANEL = 0x00BF,
    // KC_ASSISTANT = 0x00C0,
    // KC_MISSION_CONTROL = 0x00C1,
    // KC_LAUNCHPAD = 0x00C2,

    KC_LEFT_CTRL = 0xE0,
    KC_LEFT_SHIFT = 0xE1,
    KC_LEFT_ALT = 0xE2,
    KC_LEFT_GUI = 0xE3,
    KC_RIGHT_CTRL = 0xE4,
    KC_RIGHT_SHIFT = 0xE5,
    KC_RIGHT_ALT = 0xE6,
    KC_RIGHT_GUI = 0xE7,

    KC_MNEXT = 0xB5,
    KC_MPREV = 0xB6,
    KC_MSTOP = 0xB7,
    KC_MPLAY_PAUSE = 0xCD,

    KC_LAYER(usize),
    KC_MO(usize),
    KC_NO_KEY,
    KC_TRANS,

    KEYS_2(&'static Keycode, &'static Keycode),
}

impl Keycode {
    #[allow(clippy::must_use_candidate)]
    pub const fn is_consumer(&self) -> bool {
        matches!(
            self,
            Self::KC_MNEXT
                | Self::KC_MPREV
                | Self::KC_MSTOP
                | Self::KC_MPLAY_PAUSE
                | Self::KC_MUTE
                | Self::KC_VOLUP
                | Self::KC_VOLDOWN
        )
    }

    #[allow(clippy::must_use_candidate)]
    pub const fn into_consumer(&self) -> Option<u16> {
        match self {
            Self::KC_MNEXT => Some(0xB5),
            Self::KC_MPREV => Some(0xB6),
            Self::KC_MSTOP => Some(0xB7),
            Self::KC_MPLAY_PAUSE => Some(0xCD),
            Self::KC_MUTE => Some(0xE2),
            Self::KC_VOLUP => Some(0xE9),
            Self::KC_VOLDOWN => Some(0xEA),
            _ => None,
        }
    }
}

impl TryInto<u8> for Keycode {
    type Error = &'static str;
    fn try_into(self) -> Result<u8, Self::Error> {
        match self {
            KC_NO => Ok(0x00),
            KC_A => Ok(0x04),
            KC_B => Ok(0x05),
            KC_C => Ok(0x06),
            KC_D => Ok(0x07),
            KC_E => Ok(0x08),
            KC_F => Ok(0x09),
            KC_G => Ok(0x0a),
            KC_H => Ok(0x0b),
            KC_I => Ok(0x0c),
            KC_J => Ok(0x0d),
            KC_K => Ok(0x0e),
            KC_L => Ok(0x0f),
            KC_M => Ok(0x10),
            KC_N => Ok(0x11),
            KC_O => Ok(0x12),
            KC_P => Ok(0x13),
            KC_Q => Ok(0x14),
            KC_R => Ok(0x15),
            KC_S => Ok(0x16),
            KC_T => Ok(0x17),
            KC_U => Ok(0x18),
            KC_V => Ok(0x19),
            KC_W => Ok(0x1a),
            KC_X => Ok(0x1b),
            KC_Y => Ok(0x1c),
            KC_Z => Ok(0x1d),
            KC_1 => Ok(0x1e),
            KC_2 => Ok(0x1f),
            KC_3 => Ok(0x20),
            KC_4 => Ok(0x21),
            KC_5 => Ok(0x22),
            KC_6 => Ok(0x23),
            KC_7 => Ok(0x24),
            KC_8 => Ok(0x25),
            KC_9 => Ok(0x26),
            KC_0 => Ok(0x27),
            KC_ENTER => Ok(0x28),
            KC_ESCAPE => Ok(0x29),
            KC_BACKSPACE => Ok(0x2A),
            KC_TAB => Ok(0x2B),
            KC_SPACE => Ok(0x2C),
            KC_MINUS => Ok(0x2D),
            KC_EQUAL => Ok(0x2E),
            KC_LEFT_BRACKET => Ok(0x2F),
            KC_RIGHT_BRACKET => Ok(0x30),
            KC_BACKSLASH => Ok(0x31),
            KC_NONUS_HASH => Ok(0x32),
            KC_SEMICOLON => Ok(0x33),
            KC_QUOTE => Ok(0x34),
            KC_GRAVE => Ok(0x35),
            KC_COMMA => Ok(0x36),
            KC_DOT => Ok(0x37),
            KC_SLASH => Ok(0x38),
            KC_CAPS_LOCK => Ok(0x39),
            KC_F1 => Ok(0x3A),
            KC_F2 => Ok(0x3B),
            KC_F3 => Ok(0x3C),
            KC_F4 => Ok(0x3D),
            KC_F5 => Ok(0x3E),
            KC_F6 => Ok(0x3F),
            KC_F7 => Ok(0x40),
            KC_F8 => Ok(0x41),
            KC_F9 => Ok(0x42),
            KC_F10 => Ok(0x43),
            KC_F11 => Ok(0x44),
            KC_F12 => Ok(0x45),
            KC_PRINTSCREEN => Ok(0x46),
            KC_SCROLL_LOCK => Ok(0x47),
            KC_PAUSE => Ok(0x48),
            KC_INSERT => Ok(0x49),
            KC_HOME => Ok(0x4A),
            KC_PAGEUP => Ok(0x4B),
            KC_DELETE_FORWARD => Ok(0x4C),
            KC_END => Ok(0x4D),
            KC_PAGEDOWN => Ok(0x4E),
            KC_RIGHT_ARROW => Ok(0x4F),
            KC_LEFT_ARROW => Ok(0x50),
            KC_DOWN_ARROW => Ok(0x51),
            KC_UP_ARROW => Ok(0x52),
            KC_NUM_LOCK => Ok(0x53),
            KC_KEYPAD_FOWARDSLASH => Ok(0x54),
            KC_KEYPAD_ASTERISK => Ok(0x55),
            KC_KEYPAD_MINUS => Ok(0x56),
            KC_KEYPAD_PLUS => Ok(0x57),
            KC_KEYPAD_ENTER => Ok(0x58),
            KC_KEYPAD_1 => Ok(0x59),
            KC_KEYPAD_2 => Ok(0x5a),
            KC_KEYPAD_3 => Ok(0x5b),
            KC_KEYPAD_4 => Ok(0x5c),
            KC_KEYPAD_5 => Ok(0x5d),
            KC_KEYPAD_6 => Ok(0x5e),
            KC_KEYPAD_7 => Ok(0x5f),
            KC_KEYPAD_8 => Ok(0x60),
            KC_KEYPAD_9 => Ok(0x61),
            KC_KEYPAD_0 => Ok(0x62),
            KC_KEYPAD_DOT => Ok(0x63),
            KC_NONUS_BACKSLASH => Ok(0x64),
            KC_APP => Ok(0x65),
            KC_POWER => Ok(0x66),
            KC_KEYPAD_EQUAL => Ok(0x67),
            KC_F13 => Ok(0x68),
            KC_F14 => Ok(0x69),
            KC_F15 => Ok(0x6a),
            KC_F16 => Ok(0x6b),
            KC_F17 => Ok(0x6c),
            KC_F18 => Ok(0x6d),
            KC_F19 => Ok(0x6e),
            KC_F20 => Ok(0x6f),
            KC_F21 => Ok(0x70),
            KC_F22 => Ok(0x71),
            KC_F23 => Ok(0x72),
            KC_F24 => Ok(0x73),
            KC_EXECUTE => Ok(0x74),
            KC_HELP => Ok(0x75),
            KC_MENU => Ok(0x76),
            KC_SELECT => Ok(0x77),
            KC_STOP => Ok(0x78),
            KC_AGAIN => Ok(0x79),
            KC_UNDO => Ok(0x7A),
            KC_CUT => Ok(0x7B),
            KC_PASTE => Ok(0x7D),
            KC_FIND => Ok(0x7E),
            KC_MUTE => Ok(0x7f),
            KC_VOLUP => Ok(0x80),
            KC_VOLDOWN => Ok(0x81),
            KC_LOCKING_CAPS_LOCK => Ok(0x0082),
            KC_LOCKING_NUM_LOCK => Ok(0x0083),
            KC_LOCKING_SCROLL_LOCK => Ok(0x0084),
            KC_KEYPAD_COMMA => Ok(0x85),
            KC_EQUAL_SIGN => Ok(0x86),
            KC_INTERNATIONAL_1 => Ok(0x0087),
            KC_INTERNATIONAL_2 => Ok(0x0088),
            KC_INTERNATIONAL_3 => Ok(0x0089),
            KC_INTERNATIONAL_4 => Ok(0x008A),
            KC_INTERNATIONAL_5 => Ok(0x008B),
            KC_INTERNATIONAL_6 => Ok(0x008C),
            KC_INTERNATIONAL_7 => Ok(0x008D),
            KC_INTERNATIONAL_8 => Ok(0x008E),
            KC_INTERNATIONAL_9 => Ok(0x008F),
            KC_LANGUAGE_1 => Ok(0x0090),
            KC_LANGUAGE_2 => Ok(0x0091),
            KC_LANGUAGE_3 => Ok(0x0092),
            KC_LANGUAGE_4 => Ok(0x0093),
            KC_LANGUAGE_5 => Ok(0x0094),
            KC_LANGUAGE_6 => Ok(0x0095),
            KC_LANGUAGE_7 => Ok(0x0096),
            KC_LANGUAGE_8 => Ok(0x0097),
            KC_LANGUAGE_9 => Ok(0x0098),
            KC_ALTERNATE_ERASE => Ok(0x0099),
            KC_SYSTEM_REQUEST => Ok(0x009A),
            KC_CANCEL => Ok(0x009B),
            KC_CLEAR => Ok(0x009C),
            KC_PRIOR => Ok(0x009D),
            KC_RETURN => Ok(0x009E),
            KC_SEPARATOR => Ok(0x009F),
            KC_OUT => Ok(0x00A0),
            KC_OPER => Ok(0x00A1),
            KC_CLEAR_AGAIN => Ok(0x00A2),
            KC_CRSEL => Ok(0x00A3),
            KC_EXSEL => Ok(0x00A4),
            // KC_SYSTEM_POWER => Ok(0x00A5),
            // KC_SYSTEM_SLEEP => Ok(0x00A6),
            // KC_SYSTEM_WAKE => Ok(0x00A7),
            // KC_AUDIO_MUTE => Ok(0x00A8),
            // KC_AUDIO_VOL_UP => Ok(0x00A9),
            // KC_AUDIO_VOL_DOWN => Ok(0x00AA),
            // KC_MEDIA_NEXT_TRACK => Ok(0x00AB),
            // KC_MEDIA_PREV_TRACK => Ok(0x00AC),
            // KC_MEDIA_STOP => Ok(0x00AD),
            // KC_MEDIA_PLAY_PAUSE => Ok(0x00AE),
            // KC_MEDIA_SELECT => Ok(0x00AF),
            // KC_MEDIA_EJECT => Ok(0x00B0),
            // KC_MAIL => Ok(0x00B1),
            // KC_CALCULATOR => Ok(0x00B2),
            // KC_MY_COMPUTER => Ok(0x00B3),
            // KC_WWW_SEARCH => Ok(0x00B4),
            // KC_WWW_STOP => Ok(0x00B8),
            // KC_WWW_REFRESH => Ok(0x00B9),
            // KC_WWW_FAVORITES => Ok(0x00BA),
            // KC_MEDIA_FAST_FORWARD => Ok(0x00BB),
            // KC_MEDIA_REWIND => Ok(0x00BC),
            // KC_BRIGHTNESS_UP => Ok(0x00BD),
            // KC_BRIGHTNESS_DOWN => Ok(0x00BE),
            // KC_CONTROL_PANEL => Ok(0x00BF),
            // KC_ASSISTANT => Ok(0x00C0),
            // KC_MISSION_CONTROL => Ok(0x00C1),
            // KC_LAUNCHPAD => Ok(0x00C2),
            KC_LEFT_CTRL => Ok(0xE0),
            KC_LEFT_SHIFT => Ok(0xE1),
            KC_LEFT_ALT => Ok(0xE2),
            KC_LEFT_GUI => Ok(0xE3),
            KC_RIGHT_CTRL => Ok(0xE4),
            KC_RIGHT_SHIFT => Ok(0xE5),
            KC_RIGHT_ALT => Ok(0xE6),
            KC_RIGHT_GUI => Ok(0xE7),
            KC_MNEXT => Ok(0xB5),
            KC_MPREV => Ok(0xB6),
            KC_MSTOP => Ok(0xB7),
            KC_MPLAY_PAUSE => Ok(0xCD),
            _ => Err("Non usb Keycode"),
        }
    }
}

impl TryInto<u8> for &Keycode {
    type Error = &'static str;
    fn try_into(self) -> Result<u8, Self::Error> {
        (*self).try_into()
    }
}
